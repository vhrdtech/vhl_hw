type BrightnessValue = autonum<0.000, 0.001 ..= 1.000>; // uq<1,10> 0 .. 1.9990234375
enum EasingType {
    Linear,
	Quadratic,
	Qubic,
}

rs main {
	rs channel<[Cell<Self>; 12], #0> {
	    /// Control PWM duty cycle directly
	    #[path]
		rs raw_brightness<rw+stream BrightnessValue, #0> {
			default: 0.0;
			examples: [0.0, 0.25, 0.5, 0.75, 1.0];
		}

		rs gamma_brightness<rw+stream BrightnessValue, #1> {
            /// Gamma coefficient used to correct brighntess values
			rs gamma<autonum<0.0, 0.01 ..= 10.0>, #0> {}
		}

		rs smooth<rw u16 `ms`, #2> {
			default: 0;

			rs curve<rw EasingType, #0> {}
		}
	}

	rs rgbw_group<[Self; max 4], #1> {
		description: "Combine several channels into one RGB or RGBW virtual channel. Borrows channels when enabled.";
		rs enabled<rw bool, #0> {}
		rs channels<rw [indexof<super::channel>; 3..=4], #1> {}
		rs as_rgb<rw+stream Rgb, #2> {}
		rs as_hsv<rw+stream Hsv, #3> {}
	}

	rs white_group<[Self; max 4], #2> {
		description: "Combine several channels connected to white LEDs with different color temperatures.";
		rs enabled<rw bool, #0> {}
		rs channels<rw [ (indexof<super::channel>, u16 `K`) ; 2..=4], #1> {}
		rs value<rw+stream BrightnessValue, #2> {}
		rs temperature<rw+stream u16 `K`, #3> {}
	}

	rs all_off<fn(), #3> {}
	rs all_prev<fn(), #4> {}

    impl log::defmt;
    impl ota::bootloader_entrypoint;
    impl canbus::counters;
    impl vhcan::counters;
}