struct HwInfo {
	name: str,
	variant: str,
	revision: SemVer,
	serial: str,
}

struct FwInfo {
	version: SemVer,
	variant: str,
	vcs_sha: str,
}

struct ExtensionsInfo {
	bus_power_present: bool, // not possible to figure out in hw
	ch2_present: bool, // resistor
	ch2_version: str,
	pd_present: bool, // read through i2c/usart
	pd_version: str,
	poe_present: bool, // read through i2c/usart
	poe_version: str,
}

enum Driver {
	Vhcan,
	Socketcan
}

/*struct RateCounter<T: WholeNumber[U]> {
	current: T,
	rate: u32[unit_of(T)/s]
}

struct Counters<T: WholeNumber[U]> {
	in: RateCounter<T>,
	out: RateCounter<T>
}*/

enum IpAddr {
	Ipv4(Ipv4Addr),
	Ipv6(Ipv6Addr)
}

// Info about which port on the device is used
enum UsbPortInfo {
	// Normally PD port, always connected to H7
	FsPdH7, 
	// If F7 USB-SPI bridge is present, second USB is connected to it
	HsF7, 
	// If F7 is absent, second USB is connected to H7 as well
	FsH7, 
}

enum Interface {
	Ethernet(IpAddr, u16),
	Usb(UsbPortInfo, UsbDevicePath),
	VhCan(VhCanNodeId),
}

struct ClientInfo {
	interface: Interface,
	port: u16,
	driver: Driver, // what API is in use
	sw_name: String, // is it a kernel driver, user code in Rust or in Python and so on.
	sw_version: SemVer,
	sw_sha: String,
}

// Which protocol is expected on the bus to perform higher level decoding and analysis
enum CanProtocol {
	Raw,
	UavCan,
	VhCan,
	CanOpen,
	J1939,
}

// Redundand bus configuration
enum PortAggregation {
	Disabled,
	FrameBased2 { port_2: u8 },
	FrameBased3 { port_2: u8, port_3: u8 }
}

struct CtrlErrorCounters {
	tec: u8,
	rec: u8,
}

enum FilterType {
	Standard(IdFilter<StandardId>),
	Extended(IdFilter<ExtendedId>)
}

/*enum IdFilter<T> {
	Mask {
		mask: T,
		value: T
	},
	Match(T),
	Range(T, T)
}*/

enum Message {
	CanFrame { id: CanId, rtr: bool, data: [u8; max 8] },
	CanFdFrame { id: CanId, brs: bool, data: [u8; max 64] },
	UavCanMessage { node_id: uavcan::NodeId, data: [u8; max 512] },
	//VhCanMessage(),
}

rs main {
	rs info {
		rs hardware<HwInfo, #0> { description: "Get information about the hardware"; }
		rs firmware<FwInfo> { description: "Get information about the firmware"; }
		rs extensions<ExtensionsInfo> { description: "Get information about installed extensions (2nd channel, bus_power, pd, poe)"; }
		rs alias<rw str> { description: "User settable device alias"; }
		rs location<rw str> { description: "User settable device location"; }
	}

/*	rs clients<[ClientInfo; max 8]> {
		description: "List of clients currently connected",
		observe_rate: max 10[Hz];

		rs disconnect<fn(i: Interface)> {
			description: "Disconnect a client, probably dangerous function."
		}
	}
	// if resources can be indexed, syntax might be cleaner:
	rs client<[_; max 8]> { // 0..8 or 'a'..'h'
		rs info<ClientInfo> {}
		rs byte_counters<ByteCounters> {}
		rs frame_counters<FrameCounters> {}
		rs disconnect<fn()> {}
	}

	rs can_ctrl_config<[CtrlConfig; max 4]> {
		rw: true;
		description: "Configuration for each physical CAN controller"
	}*/

	rs bus<[_; max 4]> {
		rs controller_config<rw CtrlConfig> { description: "Configuration of the physical CAN controller (b"; }
		rs protocol<rw CanProtocol> { description: "Which protocol is used (Raw, UavCan, VhCan, CanOpen, J1939)"; }
		rs aggregate<rw PortAggregation> { description: "Aggregate this port with others for redundant setups"; }
		
		rs counters {
			rs ll_bytes<Counters<u64 `Byte`>> { description: "Total bytes counters for the physical interface"; }
			rs frames<Counters<u64 `Frame`>> { description: "Total frame counters for the physical interface"; }
			rs ctrl_errors<CtrlErrorCounters> { description: "CAN controller hardware counters"; }
			rs zero<fn()> {}
		}

		rs tx_flow<[_; max 8]> {
			rs to_bus<Cell<stream_in<Message>>> {
				description: "Stream of messages to be transmitted on the bus, needs to be borrowed first by exactly one client.";
			}

			rs info<ClientInfo> { description: "Information about the current user of this flow"; }

			rs counters {
				rs ll_bytes<RateCounter<u64 `Byte`>> { description: "Trasnmitted low level bytes"; }
				rs frames<RateCounter<u64 `Frame`>> { description: "Trasnmitted CAN frames"; }
				rs hp_bytes<RateCounter<u64 `Byte`>> { description: "Transmitted bytes of the higher level protocol"; }
				rs messages<RateCounter<u64 `Message`>> { description: "Transmitted messages of the higher level protocol"; }
				rs zero<fn()> {}
			}
		}

		rs rx_flow<[_; max 8]> {
			rs from_bus<ro+stream u8> { description: "Stream of messages received from the bus"; }
			rs from_others<ro+stream u8> { description: "Stream of messages transmitted to the bus by other users on different flows"; }

			rs filters<rw [FilterType; max 32]> {}

			rs counters {
				rs ll_bytes<RateCounter<u64 `Byte`>> { description: "Received low level bytes"; }
				rs frames<RateCounter<u64 `Frame`>> { description: "Received CAN frames"; }
				rs hp_bytes<RateCounter<u64 `Byte`>> { description: "Received bytes of the higher level protocol"; }
				rs messages<RateCounter<u64 `Message`>> { description: "Received messages of the higher level protocol"; }
				rs zero<fn()> {}
			}
		}
	}

	rs bootloader {
		rs self {
			rs enter<fn()> {}
		}
		
		rs mcu_f7 {
			rs enter<fn()> {}
			rs firmware<rw chunks<512>> {}
			rs firmware_info {}
			rs boot<fn()> {}
		}
	}

	rs wasm {
		rs slot<[_; max 8]> {
			rs vhl<chunks> {}
			rs bytecode<chunks> {}
			rs info {}
			rs status {}
			rs run<fn()> {}
			rs autostart<rw bool> { }
			rs stop<fn()> {}
		}
	}

	rs wireguard {
		rs private_key<> {}
		rs public_key<> {}
		rs ip<Ipv4Addr> {}
		rs peers<[Self; max 4]> {
			rs ip<>{}
			rs public_key<>{}
		}
		rs status {}
		rs counters {
			rs bytes<Counters<u64 `Byte`>>{}
			rs packets<Counters<u64 `Packet`>>{}
		}
	}

	impl test;
}

/*
fn byte_and_frame_counters(byte_description: String, frame_description: String) -> xpi_block {
	quote!(
		rs ll_byte_counters<Counters<u64 [Byte]>> { description: #byte_description }
		rs frame_counters<Counters<u64 [Frame]>> { description: #frame_description }
		rs byte_counters()
		rs zero<fn()> {}
	)
}*/

